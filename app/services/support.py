from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from config import ADMIN_ID, bot
import app.keyboards as kb
from app.states import States as st

user_messages = {}

async def support(message: Message, state: FSMContext):
    await message.answer(
        "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ). "
        "–ö–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏'.",
        reply_markup=kb.support,
    )
    await state.set_state(st.get_support)
    await state.update_data(messages=[])

async def collect_user_message(message: Message, state: FSMContext):
    data = await state.get_data()
    stored_messages = data.get("messages", [])

    stored_messages.append(message)
    await state.update_data(messages=stored_messages)

    await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ 'üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏'.")

async def send_all_to_admin(message: Message, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages", [])

    if not messages:
        await message.answer("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    for admin in ADMIN_ID:
        await bot.send_message(
            chat_id=admin,
            text=f"üì© –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.full_name} (Link: tg://user?id={message.from_user.id})",
        )

    for msg in messages:
        for admin in ADMIN_ID:
            try:
                forwarded = await msg.send_copy(chat_id=admin)
                user_messages[forwarded.message_id] = message.chat.id
            except Exception as e:
                await bot.send_message(
                    chat_id=admin,
                    text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}"
                )

    await message.answer("‚úÖ –í–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.", reply_markup=kb.user_main)
    await state.clear()


async def forward(message: Message, state: FSMContext):
    if message.reply_to_message:
        for admin in ADMIN_ID:
            if message.from_user.id == admin:
                original_chat_id = user_messages.get(message.reply_to_message.message_id)
                if original_chat_id:
                    try:
                        await bot.send_message(
                            chat_id=original_chat_id,
                            text="üì¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
                        )
                        await message.send_copy(chat_id=original_chat_id)
                    except Exception as e:
                        await bot.send_message(
                            chat_id=admin,
                            text=f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {e}"
                        )
                break
    elif message.from_user.id not in ADMIN_ID:
        for admin in ADMIN_ID:
            await bot.send_message(
                chat_id=admin,
                text=f"‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.full_name} (Link: tg://user?id={message.from_user.id}):"
            )
            await message.send_copy(chat_id=admin)
