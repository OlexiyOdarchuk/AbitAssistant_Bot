from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from config import ADMIN_ID, bot
import app.keyboards as kb
from app.states import States as st

user_messages = {}

async def support(message: Message, state: FSMContext):
    await message.answer(
        "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó, —Ñ–æ—Ä–º—É–ª—é–π—Ç–µ –π–æ–≥–æ —É–≤–∞–∂–Ω–æ:",
        reply_markup=kb.return_back,
    )
    await state.set_state(st.get_support)

async def get_support_text(message: Message, state: FSMContext):
    if message.text=="‚ùå –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
        await state.set_state(None)
        await message.answer(
            "–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.\n–î–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó –ø–æ –±–æ—Ç—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µüëá",
            reply_markup=kb.user_main)
    else:
        await message.answer(
            "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ, –¥—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫. \n–í–∞–º –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
        )
        await state.set_state(None)
        await message.answer(
            "–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.\n–î–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó –ø–æ –±–æ—Ç—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µüëá",
            reply_markup=kb.user_main,
        )

        try:
            forwarded_message = await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.url}:\n\n{message.text}\n\n–ë—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –ó'–≤—è–∑–æ–∫"
            )
            
            user_messages[forwarded_message.message_id] = message.chat.id

        except Exception as e:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.url}: {e}",
            )


async def forward(message: Message, state: FSMContext):
    if message.reply_to_message and message.from_user.id == ADMIN_ID:
        original_chat_id = user_messages.get(message.reply_to_message.message_id)
        if original_chat_id:
            await bot.send_message(original_chat_id, f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤: {message.text}")
    if message.from_user.id != ADMIN_ID:
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.url}:\n\n{message.md_text} \n\n–ë—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ",
        )
        
        
# async def support(message: Message, state: FSMContext):
#     await message.answer(
#         "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó, —Ñ–æ—Ä–º—É–ª—é–π—Ç–µ –π–æ–≥–æ —É–≤–∞–∂–Ω–æ:",
#         reply_markup=kb.return_back,
#     )
#     await state.set_state(st.get_support)


# async def get_support_text(message: Message, state: FSMContext):
#     await message.answer(
#         "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ, –¥—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫. \n–í–∞–º –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
#     )
#     await state.set_state(None)
#     await message.answer(
#         "–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.\n–î–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó –ø–æ –±–æ—Ç—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µüëá",
#         reply_markup=kb.user_main,
#     )
#     try:
#         await bot.send_message(
#             chat_id=ADMIN_ID,
#             text=f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.url}:\n\n{message.md_text}  \n\n–ë—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –ó'–≤—è–∑–æ–∫",
#         )

#     except Exception as e:
#         await bot.send_message(
#             chat_id=ADMIN_ID,
#             text=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.url}: {e}",
#         )