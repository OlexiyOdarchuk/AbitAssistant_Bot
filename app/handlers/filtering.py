# Copyright (c) 2025 iShawyha. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from urllib.parse import urlparse

from app.services.parse_in_db import parser
from app.services.logger import log_user_action, log_admin_action, log_error, log_system_event
import app.keyboards as kb
import app.services.stats as stats
from app.states import States as st
from config import MULTITASK, ADMIN_ID

router = Router()


@router.message(F.text == "üß† –†–æ–∑–ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é üìä")
async def start_filter(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username

        if user_id in ADMIN_ID:
            log_admin_action(user_id, "Started analysis and filtering")
        else:
            log_user_action(user_id, username, "Started analysis and filtering")

        await message.answer("–ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ü–µ –≤—ñ–¥–µ–æ –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ç–æ–≥–æ, —è–∫ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏: https://www.youtube.com/watch?v=m5YfI8_2ONo", reply_markup=kb.remove_keyboard)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–Ω–∏–π –±–∞–ª –¥–ª—è —Ü—ñ—î—ó —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ 123.456.\n\nüîó –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏: https://www.education.ua/vstup/weighting-coefficients/\n\nüßÆ \n\n –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª: https://osvita.ua/consultations/konkurs-ball/", reply_markup=kb.return_back)
        await state.set_state(st.get_bal)
    except Exception as e:
        log_error(e, f"Error in start_filter for user {message.from_user.id}")

@router.message(st.get_bal, F.text)
async def get_bal(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        score_text = message.text

        log_user_action(user_id, username, "Entered score", f"Score: {score_text}")

        score = float(score_text.replace(',', '.'))
        if 100.000 <= score <= 200.000:
            stats.user_score[user_id] = score
            log_user_action(user_id, username, "Score validated", f"Valid score: {score}")

            await state.set_state(st.get_link)
            await message.answer(
                "–ß—É–¥–æ–≤–æ! üéØ\n\n"
                "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ—Å–≤—ñ—Ç–Ω—å–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ —Å–∞–π—Ç—É vstup.osvita.ua.\n\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
                "https://vstup.osvita.ua/y2025/r27/41/1352329/\n\n"
                "üîó –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 'https://vstup.osvita.ua/y2025/'"
            )
        else:
            log_user_action(user_id, username, "Invalid score entered", f"Score out of range: {score}")
            await message.answer("‚ùó –í–∞—à –±–∞–ª –º–∞—î –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö –≤—ñ–¥ 100 –¥–æ 200.")
    except ValueError:
        user_id = message.from_user.id
        username = message.from_user.username
        log_user_action(user_id, username, "Invalid score format", f"Non-numeric score: {message.text}")
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ —á–∏—Å–ª–æ –≤ –º–µ–∂–∞—Ö –≤—ñ–¥ 100 –¥–æ 200.")
    except Exception as e:
        log_error(e, f"Error in get_bal for user {message.from_user.id}")

@router.message(st.get_link, F.text)
async def get_link(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        url = message.text

        log_user_action(user_id, username, "Entered URL", f"URL: {url}")

        parsed_url = urlparse(message.text)
        if parsed_url.hostname == 'vstup.osvita.ua': #–ù–ï –ó–ê–ë–£–î–¨ –°–Æ–î–ò –í–ü–ò–°–ê–¢–ò y2025!!!!
            if "@" not in message.text:
                log_user_action(user_id, username, "URL validated", "Starting parsing process")

                await state.set_state(st.choice_list)
                await message.answer(
                    "üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ. –¶–µ –∑–∞–π–º–µ –¥–æ 3 —Ö–≤–∏–ª–∏–Ω...\n\nP.S. –£—Å–µ –æ–¥–Ω–æ —à–≤–∏–¥—à–µ, –Ω—ñ–∂ –≤—Ä—É—á–Ω—É üòÑ",
                    reply_markup=kb.remove_keyboard
                )
            else:
                log_user_action(user_id, username, "Suspicious URL detected", f"URL contains @: {url}")
                await message.answer(
                    "‚ùó –ê—Ö —Ç–∏ —Ö–∞–∫–µ—Ä, –±–ª—ñ–Ω, —Å–≤–æ—ó–º–∏ —Ñ–µ–π–∫–æ–≤–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ —Ç—É—Ç –Ω–µ —Ä–æ–∑–∫–∏–¥—É–π—Å—è ‚ùó",
                    reply_markup=kb.user_main
                )
                return

            # –ñ–¥–µ —á–µ—Ä–≥—É
            async with MULTITASK:
                try:
                    log_system_event("Parsing started", f"User {user_id} started parsing URL: {url}")

                    if await parser(url, user_id) == "Error":
                        log_user_action(user_id, username, "Parsing failed", f"Error returned for URL: {url}")
                        await message.answer("üßÆ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –º–æ–∂–ª–∏–≤–æ –≤–æ–Ω–æ —Ö–∏–±–Ω–µ üôÇ", reply_markup=kb.user_main)
                        return

                except Exception as e:
                    log_error(e, f"Parsing exception for user {user_id}, URL: {url}")
                    await message.answer(
                        "–£–ø—Å... —É –Ω–∞—Å –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ üôÇ",
                        reply_markup=kb.user_main
                    )
                    return

            log_user_action(user_id, username, "Parsing completed successfully", f"URL: {url}")
            await message.answer("–ì–æ—Ç–æ–≤–æ! ‚úÖ", reply_markup=kb.return_back)

            how_all_applicant = await stats.all_applicant_len(user_id)
            how_competitor_applicant = await stats.competitors_applicant_len(user_id)

            log_user_action(user_id, username, "Analysis results",
                          f"Total applicants: {how_all_applicant}, Competitors: {how_competitor_applicant}")

            await message.answer(
                f"""üîç –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
–ù–∞ —Ü—ñ–π –æ—Å–≤—ñ—Ç–Ω—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ –Ω–∞—Ä–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω–æ {how_all_applicant} –±—é–¥–∂–µ—Ç–Ω–∏—Ö –∑–∞—è–≤–æ–∫.
–ê–ª–µ –ª–∏—à–µ {how_competitor_applicant} –∑ –Ω–∏—Ö ‚Äî —Ü–µ –≤–∞—à—ñ —Å–ø—Ä–∞–≤–∂–Ω—ñ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏ üòâ

üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ, –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏!
            """,
                reply_markup=kb.applicant_stat
            )

        else:
            log_user_action(user_id, username, "Invalid URL format", f"URL doesn't start with vstup.osvita.ua: {url}")
            await message.answer("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 'https://vstup.osvita.ua/y2025/' —Ç–∞ –±—É—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º")
    except ValueError:
        user_id = message.from_user.id
        username = message.from_user.username
        log_user_action(user_id, username, "URL validation error", f"ValueError for URL: {message.text}")
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Å–≤—ñ—Ç–Ω—é –ø—Ä–æ–≥—Ä–∞–º—É")
    except Exception as e:
        log_error(e, f"Error in get_link for user {message.from_user.id}")
