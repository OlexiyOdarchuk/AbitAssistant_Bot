# Copyright (c) 2025 iShawyha. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

from aiogram import Router, F
from aiogram.types import (
    Message,
    FSInputFile,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

import app.services.mailing as mail
from app.states import States as st
import app.services.stats as stats
from app.services.logger import (
    log_admin_action,
    log_error,
    get_log_files,
    get_log_content,
)
from app.services.user_management import get_users_with_links
from config import ADMIN_ID

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_ID


@router.message(F.text == "üì£ –†–æ–∑—Å–∏–ª–∫–∞")
async def mailing(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    try:
        log_admin_action(message.from_user.id, "Started mailing process")
        await mail.mailing(message, state)
    except Exception as e:
        log_error(e, f"Error in mailing command for admin {message.from_user.id}")


@router.message(st.get_mailing)
async def get_mailing_text(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    try:
        log_admin_action(
            message.from_user.id,
            "Entered mailing text",
            f"Text length: {len(message.text)}",
        )
        await mail.get_mailing_text(message, state)
    except Exception as e:
        log_error(e, f"Error in get_mailing_text for admin {message.from_user.id}")


@router.message(st.init_mailing, F.text == "üì£ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É")
async def init(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    try:
        log_admin_action(message.from_user.id, "Sent mailing")
        await mail.init(message, state)
    except Exception as e:
        log_error(e, f"Error in init mailing for admin {message.from_user.id}")


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message: Message):
    if not is_admin(message.from_user.id):
        return

    try:
        log_admin_action(message.from_user.id, "Viewed statistics")
        await message.answer(await stats.admin_statistics())
    except Exception as e:
        log_error(e, f"Error in statistics command for admin {message.from_user.id}")


@router.message(F.text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
async def users_menu(message: Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    if not is_admin(message.from_user.id):
        return

    try:
        log_admin_action(message.from_user.id, "Viewed users list")

        users_text = await get_users_with_links(limit=50)
        await message.answer(users_text, parse_mode="Markdown")

    except Exception as e:
        log_error(e, f"Error in users_menu for admin {message.from_user.id}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")


@router.message(F.text == "üìã –õ–æ–≥–∏")
async def logs_menu(message: Message):
    """–ú–µ–Ω—é –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        log_admin_action(message.from_user.id, "Opened logs menu")

        log_files = get_log_files()

        if not log_files:
            await message.answer("üìã –õ–æ–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        builder = InlineKeyboardBuilder()

        for filename, file_info in log_files.items():
            size_text = f"{file_info['size_mb']}MB"
            builder.add(
                InlineKeyboardButton(
                    text=f"üìÑ {filename} ({size_text})",
                    callback_data=f"log_view_{filename}",
                )
            )

        builder.add(
            InlineKeyboardButton(
                text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –ª–æ–≥–∏", callback_data="logs_download_all"
            )
        )

        await message.answer(
            "üìã **–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è**\n\n–î–æ—Å—Ç—É–ø–Ω—ñ –ª–æ–≥ —Ñ–∞–π–ª–∏:",
            reply_markup=builder.as_markup(),
        )
    except Exception as e:
        log_error(e, f"Error in logs_menu for admin {message.from_user.id}")


@router.callback_query(F.data.startswith("log_view_"))
async def log_view_callback_handler(callback):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return

    filename = callback.data.split("log_view_")[1]
    log_admin_action(callback.from_user.id, "Viewed log file", f"File: {filename}")

    log_content = get_log_content(filename, 50)  # –û—Å—Ç–∞–Ω–Ω—ñ 50 —Ä—è–¥–∫—ñ–≤

    if log_content:
        if len(log_content) > 4000:
            # –Ø–∫—â–æ –ª–æ–≥ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
            log_file = FSInputFile(f"logs/{filename}")
            await callback.message.answer_document(
                log_file, caption=f"üìã –õ–æ–≥ —Ñ–∞–π–ª: {filename}"
            )
        else:
            await callback.message.answer(
                f"üìã **–õ–æ–≥ —Ñ–∞–π–ª: {filename}**\n\n```\n{log_content}\n```"
            )
    else:
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥ —Ñ–∞–π–ª—É")

    await callback.answer()


@router.callback_query(F.data == "logs_download_all")
async def download_all_logs_callback_handler(callback):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ª–æ–≥—ñ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return

    log_admin_action(callback.from_user.id, "Downloaded all logs")

    log_files = get_log_files()

    if not log_files:
        await callback.message.answer("‚ùå –õ–æ–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await callback.answer()
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω –ª–æ–≥ —Ñ–∞–π–ª –æ–∫—Ä–µ–º–æ
    for filename in log_files.keys():
        try:
            log_file = FSInputFile(f"logs/{filename}")
            await callback.message.answer_document(log_file, caption=f"üìã {filename}")
        except Exception as e:
            await callback.message.answer(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filename}: {str(e)}"
            )

    await callback.answer("üì• –í—Å—ñ –ª–æ–≥–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
