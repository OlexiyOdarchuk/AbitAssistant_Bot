# Copyright (c) 2025 iShawyha. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import re
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

import app.keyboards as kb
import app.database.requests as rq
import app.services.stats as stats
from app.services.logger import log_user_action, log_admin_action, log_error
from app.states import States as st
from config import ADMIN_ID

router = Router()
change_page_text = "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É, —â–æ–± –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é."


@router.callback_query(
    StateFilter(st.view_all, st.view_competitors), F.data == "applicant_back_to_stat"
)
async def back_to_stat(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username

        if user_id in ADMIN_ID:
            log_admin_action(user_id, "Returned to statistics from viewing")
        else:
            log_user_action(user_id, username, "Returned to statistics from viewing")

        await callback.message.delete()
        await state.set_state(st.choice_list)
        how_all_applicant = await stats.all_applicant_len(user_id)
        how_competitor_applicant = await stats.competitors_applicant_len(user_id)
        await callback.message.answer(
            f"""üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
–ù–∞ —Ü—ñ–π –æ—Å–≤—ñ—Ç–Ω—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ –Ω–∞—Ä–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω–æ {how_all_applicant} –±—é–¥–∂–µ—Ç–Ω–∏—Ö –∑–∞—è–≤–æ–∫.
–ê–ª–µ –ª–∏—à–µ {how_competitor_applicant} –∑ –Ω–∏—Ö ‚Äî —Ü–µ –≤–∞—à—ñ —Å–ø—Ä–∞–≤–∂–Ω—ñ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏ üòâ

üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ, –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏!
            """,
            reply_markup=kb.applicant_stat,
        )
    except Exception as e:
        log_error(e, f"Error in back_to_stat for user {callback.from_user.id}")


@router.callback_query(st.choice_list, F.data == "view_applicant_all")
async def view_applicant_all(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username

        if user_id in ADMIN_ID:
            log_admin_action(user_id, "Started viewing all applicants")
        else:
            log_user_action(user_id, username, "Started viewing all applicants")

        await state.set_state(st.view_all)
        keyboard = await kb.builder_applicant_all(user_id, 1)
        sent = await callback.message.edit_text(
            "üìã –í—Å—ñ –±—é–¥–∂–µ—Ç–Ω—ñ –∑–∞—è–≤–∏ –Ω–∞ –¥–∞–Ω—É –æ—Å–≤—ñ—Ç–Ω—é –ø—Ä–æ–≥—Ä–∞–º—É", reply_markup=keyboard
        )
        await state.update_data(last_bot_message_id=sent.message_id)
    except Exception as e:
        log_error(e, f"Error in view_applicant_all for user {callback.from_user.id}")


@router.callback_query(st.choice_list, F.data == "view_applicant_competitors")
async def view_applicant_competitors(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username

        if user_id in ADMIN_ID:
            log_admin_action(user_id, "Started viewing competitors")
        else:
            log_user_action(user_id, username, "Started viewing competitors")

        await state.set_state(st.view_competitors)
        keyboard = await kb.builder_applicant_competitors(
            user_id, stats.user_score[user_id], 1
        )
        sent = await callback.message.edit_text(
            "üéØ –í—Å—ñ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å–ø—Ä–æ–º–æ–∂–Ω—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–∞–Ω—É –æ—Å–≤—ñ—Ç–Ω—é –ø—Ä–æ–≥—Ä–∞–º—É",
            reply_markup=keyboard,
        )
        await state.update_data(last_bot_message_id=sent.message_id)
    except Exception as e:
        log_error(
            e, f"Error in view_applicant_competitors for user {callback.from_user.id}"
        )


@router.callback_query(st.view_all, F.data.startswith("applicant_page_"))
async def change_page_all(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username
        page = int(callback.data.split("_")[-1])

        log_user_action(
            user_id, username, "Changed page in all applicants", f"Page: {page}"
        )

        keyboard = await kb.builder_applicant_all(user_id, page)
        sent = await callback.message.edit_text(change_page_text, reply_markup=keyboard)
        await state.update_data(last_bot_message_id=sent.message_id)
    except Exception as e:
        log_error(e, f"Error in change_page_all for user {callback.from_user.id}")


@router.callback_query(st.view_competitors, F.data.startswith("competitors_page_"))
async def change_page_competitors(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username
        page = int(callback.data.split("_")[-1])

        log_user_action(
            user_id, username, "Changed page in competitors", f"Page: {page}"
        )

        keyboard = await kb.builder_applicant_competitors(
            user_id, stats.user_score[user_id], page
        )
        sent = await callback.message.edit_text(change_page_text, reply_markup=keyboard)

        await state.update_data(last_bot_message_id=sent.message_id)
    except Exception as e:
        log_error(
            e, f"Error in change_page_competitors for user {callback.from_user.id}"
        )


@router.message(st.view_all)
async def change_page_at_message_all(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username

        await message.delete()

        data = await state.get_data()
        last_bot_message_id = data.get("last_bot_message_id")

        if last_bot_message_id:
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id, message_id=last_bot_message_id
                )
            except Exception as e:
                log_error(e, f"Failed to delete old bot message for user {user_id}")

        try:
            page = int(message.text)
            log_user_action(
                user_id,
                username,
                "Changed page via message in all applicants",
                f"Page: {page}",
            )
        except ValueError:
            log_user_action(
                user_id,
                username,
                "Invalid page number entered",
                f"Invalid input: {message.text}",
            )
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —á–∏—Å–ª–æ–º.")
            return

        keyboard = await kb.builder_applicant_all(user_id, page)

        sent = await message.answer(change_page_text, reply_markup=keyboard)

        await state.update_data(last_bot_message_id=sent.message_id)
    except Exception as e:
        log_error(
            e, f"Error in change_page_at_message_all for user {message.from_user.id}"
        )


@router.message(st.view_competitors)
async def change_page_at_message_competitors(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username

        await message.delete()

        data = await state.get_data()
        last_bot_message_id = data.get("last_bot_message_id")

        if last_bot_message_id:
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id, message_id=last_bot_message_id
                )
            except Exception as e:
                log_error(e, f"Failed to delete old bot message for user {user_id}")

        try:
            page = int(message.text)
            log_user_action(
                user_id,
                username,
                "Changed page via message in competitors",
                f"Page: {page}",
            )
        except ValueError:
            log_user_action(
                user_id,
                username,
                "Invalid page number entered",
                f"Invalid input: {message.text}",
            )
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —á–∏—Å–ª–æ–º.")
            return

        keyboard = await kb.builder_applicant_competitors(
            user_id, stats.user_score[user_id], page
        )

        sent = await message.answer(change_page_text, reply_markup=keyboard)

        await state.update_data(last_bot_message_id=sent.message_id)
    except Exception as e:
        log_error(
            e,
            f"Error in change_page_at_message_competitors for user {message.from_user.id}",
        )


@router.callback_query(
    StateFilter(st.view_all, st.view_competitors), F.data.startswith("applicant_")
)
async def all_info(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username

        await callback.answer()
        data = await rq.get_user_data(user_id)
        applicant_id = int(callback.data.split("_")[-1])
        applicants = [
            applicant for applicant in data if applicant.user_tg_id == user_id
        ]

        for applicant in applicants:
            if applicant.id == applicant_id:
                log_user_action(
                    user_id,
                    username,
                    "Viewed applicant details",
                    f"Applicant: {applicant.name}, ID: {applicant_id}",
                )

                display_quota = applicant.quota if applicant.quota else "-"
                display_coefficient = (
                    applicant.coefficient if applicant.coefficient else "-"
                )
                formatted_detail = "-"
                if applicant.detail:
                    formatted_detail = re.sub(
                        r"([–ê-–Ø–Ü–á–ÑA-Z–∞-—è—ñ—ó—î“ê“ë\s]+?)(\d{2,3})(?=[–ê-–Ø–Ü–á–ÑA-Z])",
                        r"\1: \2\n",
                        applicant.detail,
                    ).strip()  # ([–ê-–Ø–Ü–á–ÑA-Z–∞-—è—ñ—ó—î“ê“ë\s]+?) - –ª–æ–≤–∏—Ç—å –Ω–∞–∑–≤—É, (\d{2,3}) - –ª–æ–≤–∏—Ç—å —á–∏—Å–ª–æ, (?=[–ê-–Ø–Ü–á–ÑA-Z]) - –ø—ñ—Å–ª—è —á–∏—Å–ª–∞ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞
                await callback.message.answer(
                    f"""üìÑ –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞:

üë§ –ü–Ü–ü: {applicant.name}
üìÑ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∏: {applicant.status}
üéØ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–≤—ñ—Ç–Ω—é –ø—Ä–æ–≥—Ä–∞–º—É: {applicant.priority}
üìà –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–Ω–∏–π –±–∞–ª –Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {applicant.score if applicant.score else "-"}

üìö –ë–∞–ª–∏ –ù–ú–¢:
{formatted_detail}

‚öñÔ∏è –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç: {display_coefficient}
üè∑Ô∏è –ö–≤–æ—Ç–∞: {display_quota}
üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å: {"‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç" if applicant.competitor else "‚ùå –ù–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç"}
üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–±—ñ—Ç-–ø–æ—à—É–∫:
{applicant.link if applicant.link else "-"}
"""
                )
                break
    except Exception as e:
        log_error(e, f"Error in all_info for user {callback.from_user.id}")
