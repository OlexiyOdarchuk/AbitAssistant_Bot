from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import app.database.requests as rq
remove_keyboard = ReplyKeyboardRemove()

admin_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù–ü–æ—á–∞—Ç–∏ –≤—ñ–¥—Å—ñ—é–≤–∞–Ω–Ω—è!üìù")],
        [KeyboardButton(text="üí∏–î–æ–Ω–∞—Çüí∏"), KeyboardButton(text="üìë–ü—Ä–æ –Ω–∞—Åüìë")],
        [KeyboardButton(text="üì£–†–æ–∑—Å–∏–ª–∫–∞!")],
    ],
    resize_keyboard=True,
)

user_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù–ü–æ—á–∞—Ç–∏ –≤—ñ–¥—Å—ñ—é–≤–∞–Ω–Ω—è!üìù")],
        [KeyboardButton(text="üí∏–î–æ–Ω–∞—Çüí∏"), KeyboardButton(text="üìë–ü—Ä–æ –Ω–∞—Åüìë")],
        [KeyboardButton(text="üë§–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—éüë§")],
    ],
    resize_keyboard=True,
)

support = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚ùå –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"), KeyboardButton(text="üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏"),
        ],
    ],
    resize_keyboard=True,
)

return_back = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]], resize_keyboard=True
)

about_us = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üí∏–î–æ–Ω–∞—Çüí∏"), KeyboardButton(text="‚ùå –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        ],
    ],
    resize_keyboard=True,
)

mailing = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—Éüì£"), KeyboardButton(text="‚ùå –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"),
        ],
    ],
    resize_keyboard=True,
)

async def builder_abit_all(tg_id:int, page:int) -> InlineKeyboardMarkup:
    abits = InlineKeyboardBuilder()
    data = await rq.get_user_data(tg_id)

    user_abits = [abit for abit in data if abit.user_tg_id == tg_id] # –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç –¥–æ–¥–∞—î—Ç—å—Å—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    per_page = 10
    total_pages = (len(user_abits) + per_page - 1) // per_page
    page = max(1, min(page, total_pages))

    start = (page - 1) * per_page
    end = start + per_page
    current_page_abits = user_abits[start:end]

    for abits_all in current_page_abits:
        abit_name = " ".join(abits_all.name.split(" ")[:2])
        abits.button(
                text=f"                    –Ü–º'—è: '{abit_name}' –ë–∞–ª: {abits_all.score}                    ", #–Ø —Ç—É—Ç —Ç—É–ø–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ —ñ–Ω—à–∏—Ö —Å–ø–æ—Å–æ–±—ñ–≤ –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥
                callback_data=f'abit_{abits_all.id}'
            )
    abits.adjust(1)

    nav_buttons = InlineKeyboardBuilder()
    #–¢—É—Ç —â–∞—Å –±—É–¥–µ —Ç–∞ —Å–∞–º–∞ —Ñ—ñ–≥–Ω—è –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏. –ù—É –Ω–µ–º–∞—î –≤ –º–µ–Ω–µ —ñ–¥–µ–π —ñ –≤—Å—å–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–∞–∫–∏–º–∏ –∫–æ—Å—Ç–∏–ª—è–º–∏
    if page > 1: # –¶–µ —É–º–æ–≤–∞, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "‚óÄÔ∏è", —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.button(text="‚óÄÔ∏è", callback_data=f"abit_page_{page-1}")
    nav_buttons.button(text=f"{page}/{total_pages}", callback_data="abit_back_to_stat")
    if page < total_pages:# –¶–µ —É–º–æ–≤–∞, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "‚ñ∂Ô∏è", —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.button(text="‚ñ∂Ô∏è", callback_data=f"abit_page_{page+1}")
    nav_buttons.adjust(3)# –¶–µ, —â–æ–± –≤–æ–Ω–∏ –±—É–ª–∏ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É

    abits.attach(nav_buttons)

    return abits.as_markup()

async def builder_abit_competitions(tg_id:int, user_score:float, page:int) -> InlineKeyboardMarkup:
    abits = InlineKeyboardBuilder()
    data = await rq.get_user_data(tg_id)

    user_competitors = [abit for abit in data if abit.user_tg_id == tg_id and abit.competitor] # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –¥–æ–¥–∞—î—Ç—å—Å—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω —î —É –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    per_page = 10
    total_pages = (len(user_competitors) + per_page - 1) // per_page # –í–∏—Ä–∞—Ö–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    page = max(1, min(page, total_pages))

    start = (page - 1) * per_page
    end = start + per_page
    current_page_competitors = user_competitors[start:end]

    for competitors_all in current_page_competitors:
        competitor_name = " ".join(competitors_all.name.split(" ")[:2])
        abits.button(
                text=f"–Ü–º'—è: '{competitor_name}' –ë–∞–ª: {competitors_all.score}",
                callback_data=f'competitors_{competitors_all.id}'
            )
        abits.adjust(1)

    nav_buttons = InlineKeyboardBuilder()
    #–¢—É—Ç —â–∞—Å –±—É–¥–µ —Ç–∞ —Å–∞–º–∞ —Ñ—ñ–≥–Ω—è –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏. –ù—É –Ω–µ–º–∞—î –≤ –º–µ–Ω–µ —ñ–¥–µ–π —ñ –≤—Å—å–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–∞–∫–∏–º–∏ –∫–æ—Å—Ç–∏–ª—è–º–∏
    if page > 1: # –¶–µ —É–º–æ–≤–∞, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "‚óÄÔ∏è", —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.button(text="        ‚óÄÔ∏è        ", callback_data=f"competitors_page_{page-1}")
    nav_buttons.button(text=f"        {page}/{total_pages}        ", callback_data="abit_back_to_stat")
    if page < total_pages: # –¶–µ —É–º–æ–≤–∞, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "‚ñ∂Ô∏è", —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.button(text="        ‚ñ∂Ô∏è        ", callback_data=f"competitors_page_{page+1}")
    nav_buttons.adjust(3)

    abits.attach(nav_buttons)

    return abits.as_markup()


abit_stat = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–í—Å—ñ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∏', callback_data="view_abit_all"), InlineKeyboardButton(text="–¢—ñ–ª—å–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏", callback_data="view_abit_competitors")]
    ]
)
