# Copyright (c) 2025 iShawyha. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

import app.database.requests as rq

remove_keyboard = ReplyKeyboardRemove()

admin_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† –†–æ–∑–ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é üìä")],
        [KeyboardButton(text="üí∏ –î–æ–Ω–∞—Ç üí∏"), KeyboardButton(text="üìë –ü—Ä–æ –Ω–∞—Å üìë")],
        [KeyboardButton(text="üì£ –†–æ–∑—Å–∏–ª–∫–∞"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"), KeyboardButton(text="üìã –õ–æ–≥–∏")],
    ],
    resize_keyboard=True,
)

user_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† –†–æ–∑–ø–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é üìä")],
        [KeyboardButton(text="üí∏ –î–æ–Ω–∞—Ç üí∏"), KeyboardButton(text="üìë –ü—Ä–æ –Ω–∞—Å üìë")],
        [KeyboardButton(text="üë§ –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é üë§")],
    ],
    resize_keyboard=True,
)

support = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚ùå –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"), KeyboardButton(text="üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏"),
        ],
    ],
    resize_keyboard=True,
)

return_back = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]], resize_keyboard=True
)

about_us = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üí∏ –î–æ–Ω–∞—Ç üí∏"), KeyboardButton(text="‚ùå –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        ],
    ],
    resize_keyboard=True,
)

mailing = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üì£ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É"), KeyboardButton(text="‚ùå –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"),
        ],
    ],
    resize_keyboard=True,
)

async def builder_applicant_all(tg_id:int, page:int) -> InlineKeyboardMarkup:
    applicants = InlineKeyboardBuilder()
    data = await rq.get_user_data(tg_id)

    user_applicants = [applicant for applicant in data if applicant.user_tg_id == tg_id] # –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç –¥–æ–¥–∞—î—Ç—å—Å—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    per_page = 10
    total_pages = (len(user_applicants) + per_page - 1) // per_page
    page = max(1, min(page, total_pages))

    start = (page - 1) * per_page
    end = start + per_page
    current_page_applicants = user_applicants[start:end]

    for applicants_all in current_page_applicants:
        applicant_name = " ".join(applicants_all.name.split(" ")[:2])
        applicants.button(
                text=f"        üë§ {competitor_name} | –ë–∞–ª: {competitors_all.score}        ",
                callback_data=f'applicant_{applicants_all.id}'
            )
    applicants.adjust(1)

    nav_buttons = InlineKeyboardBuilder()
    #–¢—É—Ç —â–∞—Å –±—É–¥–µ —Ñ—ñ–≥–Ω—è –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏. –ù—É –Ω–µ–º–∞—î –≤ –º–µ–Ω–µ —ñ–¥–µ–π —ñ –≤—Å—å–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–∞–∫–∏–º–∏ –∫–æ—Å—Ç–∏–ª—è–º–∏
    if page > 1: # –¶–µ —É–º–æ–≤–∞, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "‚óÄÔ∏è", —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.button(text="        ‚óÄÔ∏è        ", callback_data=f"applicant_page_{page-1}")
    nav_buttons.button(text=f"        {page}/{total_pages}        ", callback_data="applicant_back_to_stat")
    if page < total_pages:# –¶–µ —É–º–æ–≤–∞, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "‚ñ∂Ô∏è", —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.button(text="        ‚ñ∂Ô∏è        ", callback_data=f"applicant_page_{page+1}")
    nav_buttons.adjust(3)# –¶–µ, —â–æ–± –≤–æ–Ω–∏ –±—É–ª–∏ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É

    applicants.attach(nav_buttons)

    return applicants.as_markup()

async def builder_applicant_competitors(tg_id:int, user_score:float, page:int) -> InlineKeyboardMarkup:
    applicants = InlineKeyboardBuilder()
    data = await rq.get_user_data(tg_id)

    user_competitors = [applicant for applicant in data if applicant.user_tg_id == tg_id and applicant.competitor] # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –¥–æ–¥–∞—î—Ç—å—Å—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω —î —É –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    per_page = 10
    total_pages = (len(user_competitors) + per_page - 1) // per_page # –í–∏—Ä–∞—Ö–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    page = max(1, min(page, total_pages))

    start = (page - 1) * per_page
    end = start + per_page
    current_page_competitors = user_competitors[start:end]

    for competitors_all in current_page_competitors:
        competitor_name = " ".join(competitors_all.name.split(" ")[:2])
        applicants.button(
                text=f"        üë§ {competitor_name} | –ë–∞–ª: {competitors_all.score}        ",
                callback_data=f'applicant_{competitors_all.id}'
            )
        applicants.adjust(1)

    nav_buttons = InlineKeyboardBuilder()
    #–¢—É—Ç —â–∞—Å –±—É–¥–µ —Ç–∞ —Å–∞–º–∞ —Ñ—ñ–≥–Ω—è –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏. –ù—É –Ω–µ–º–∞—î –≤ –º–µ–Ω–µ —ñ–¥–µ–π —ñ –≤—Å—å–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–∞–∫–∏–º–∏ –∫–æ—Å—Ç–∏–ª—è–º–∏
    if page > 1: # –¶–µ —É–º–æ–≤–∞, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "‚óÄÔ∏è", —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.button(text="        ‚óÄÔ∏è        ", callback_data=f"competitors_page_{page-1}")
    nav_buttons.button(text=f"        {page}/{total_pages}        ", callback_data="applicant_back_to_stat")
    if page < total_pages: # –¶–µ —É–º–æ–≤–∞, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "‚ñ∂Ô∏è", —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.button(text="        ‚ñ∂Ô∏è        ", callback_data=f"competitors_page_{page+1}")
    nav_buttons.adjust(3)

    applicants.attach(nav_buttons)

    return applicants.as_markup()


applicant_stat = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='üìã –í—Å—ñ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∏', callback_data="view_applicant_all"), InlineKeyboardButton(text="üéØ –¢—ñ–ª—å–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏", callback_data="view_applicant_competitors")]
    ]
)
